{"ast":null,"code":"var _jsxFileName = \"/home/gballard23/Development/code/react-hooks-state-events-mini-project/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport CategoryFilter from \"./CategoryFilter\";\nimport NewTaskForm from \"./NewTaskForm\";\nimport TaskList from \"./TaskList\";\nimport { CATEGORIES, TASKS } from \"../data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(\"Here's the data you're working with\");\nconsole.log({\n  CATEGORIES,\n  TASKS\n});\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState(TASKS);\n  const [category, setCategory] = useState(\"All\");\n  const [selected, isSelected] = useState(false);\n\n  function handleAddTask(newTasks) {\n    setTasks([...tasks, newTasks]);\n  }\n\n  function handleCategoryChange(event) {\n    setCategory(event.target.value);\n    isSelected(event.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CategoryFilter, {\n      CATEGORIES: CATEGORIES,\n      onCategoryChange: handleCategoryChange,\n      selected: selected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewTaskForm, {\n      categories: CATEGORIES.filter(cat => cat !== \"All\"),\n      onTaskFormSubmit: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      category: category,\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eZb3/OVyG06hFIAC9+bBaAgIMMM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/gballard23/Development/code/react-hooks-state-events-mini-project/src/components/App.js"],"names":["React","useState","CategoryFilter","NewTaskForm","TaskList","CATEGORIES","TASKS","console","log","App","tasks","setTasks","category","setCategory","selected","isSelected","handleAddTask","newTasks","handleCategoryChange","event","target","value","filter","cat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,SAAlC;;AACAC,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAD,OAAO,CAACC,GAAR,CAAY;AAAEH,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAZ;;AAEA,SAASG,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACK,KAAD,CAAlC;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,UAAX,IAAyBd,QAAQ,CAAC,KAAD,CAAvC;;AAEA,WAASe,aAAT,CAAuBC,QAAvB,EAAiC;AAC/BN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWO,QAAX,CAAD,CAAR;AACD;;AAEF,WAASC,oBAAT,CAA8BC,KAA9B,EAAoC;AAClCN,IAAAA,WAAW,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACAN,IAAAA,UAAU,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AAED;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,cAAD;AACE,MAAA,UAAU,EAAEhB,UADd;AAEE,MAAA,gBAAgB,EAAEa,oBAFpB;AAGE,MAAA,QAAQ,EAAEJ;AAHZ;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE,QAAC,WAAD;AACA,MAAA,UAAU,EAAET,UAAU,CAACiB,MAAX,CAAmBC,GAAD,IAASA,GAAG,KAAK,KAAnC,CADZ;AAEC,MAAA,gBAAgB,EAAEP;AAFnB;AAAA;AAAA;AAAA;AAAA,YAPF,eAWE,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEJ,QAApB;AAA8B,MAAA,KAAK,EAAEF;AAArC;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA9BQD,G;;KAAAA,G;AAgCT,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport CategoryFilter from \"./CategoryFilter\";\nimport NewTaskForm from \"./NewTaskForm\";\nimport TaskList from \"./TaskList\";\n\nimport { CATEGORIES, TASKS } from \"../data\";\nconsole.log(\"Here's the data you're working with\");\nconsole.log({ CATEGORIES, TASKS });\n\nfunction App() {\n  const [tasks, setTasks] = useState(TASKS);\n  const [category, setCategory] = useState(\"All\");\n  const [selected, isSelected] = useState(false);\n\n  function handleAddTask(newTasks) {\n    setTasks([...tasks, newTasks]);\n  }\n\n function handleCategoryChange(event){\n   setCategory(event.target.value)\n   isSelected(event.target.value)\n\n }\n\n  return (\n    <div className=\"App\">\n      <h2>My tasks</h2>\n      <CategoryFilter \n        CATEGORIES={CATEGORIES}\n        onCategoryChange={handleCategoryChange}\n        selected={selected}\n       />\n      <NewTaskForm\n      categories={CATEGORIES.filter((cat) => cat !== \"All\")}\n       onTaskFormSubmit={handleAddTask}\n       />\n      <TaskList category={category} tasks={tasks}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}